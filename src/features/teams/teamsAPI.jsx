import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';

import { CONFIG } from 'src/global-config';

// Log Supabase URL and Key when API is initialized (for debugging only)
console.log('API Init - Supabase URL:', CONFIG.supabase.url);
// console.log('API Init - Supabase Key:', CONFIG.supabase.key); // Be cautious about logging sensitive keys

export const teamsApi = createApi({
  reducerPath: 'teamsApi', // Unique reducer path for this API slice
  baseQuery: fetchBaseQuery({
    baseUrl: `${CONFIG.supabase.url}/rest/v1/`,
    prepareHeaders: (headers) => {
      headers.set('apikey', CONFIG.supabase.key);
      headers.set('Authorization', `Bearer ${CONFIG.supabase.key}`);
      headers.set('Content-Type', 'application/json');
      headers.set('Prefer', 'return=representation');
      return headers;
    },
  }),
  tagTypes: ['Teams'], // Unique tag type for teams
  endpoints: (builder) => ({
    // 1. Get All Teams
    getTeams: builder.query({
      query: () => `teams?select=*`, // Assuming your Supabase table is named 'teams'
      providesTags: ['Teams'],
    }),

    // 2. Get a Single Team by ID
    getTeamById: builder.query({
      // **FIXED:** Removed single quotes around the teamId for eq. operator with UUIDs
      query: (teamId) => {
        const queryString = `teams?id=eq.${teamId}&select=*`;
        console.log('getTeamById Query String:', queryString); // Log the generated query string
        return queryString;
      },
      providesTags: (result, error, id) => [{ type: 'Teams', id }],
      transformResponse: (response) => {
        // Supabase returns an array, even for single ID queries
        if (Array.isArray(response) && response.length > 0) {
          return response[0]; // Return the first (and only) item
        }
        console.log('getTeamById - No team found or empty response:', response); // Log if no team is found
        return null; // Return null if no team is found
      },
    }),

    // 3. Create a New Team
    createTeam: builder.mutation({
      query: (newTeamData) => ({
        url: 'teams',
        method: 'POST',
        body: newTeamData,
      }),
      invalidatesTags: ['Teams'], // Invalidate the 'Teams' list cache
    }),

    // 4. Update an Existing Team
    updateTeam: builder.mutation({
      query: ({ id, ...patch }) => ({
        // **FIXED:** Removed single quotes around the id for eq. operator with UUIDs
        url: `teams?id=eq.${id}`,
        method: 'PATCH',
        body: patch,
      }),
      invalidatesTags: (result, error, { id }) => ['Teams', { type: 'Teams', id }],
    }),

    // 5. Delete a Team
    deleteTeam: builder.mutation({
      query: (id) => ({
        // **FIXED:** Removed single quotes around the id for eq. operator with UUIDs
        url: `teams?id=eq.${id}`,
        method: 'DELETE',
      }),
      invalidatesTags: (result, error, id) => ['Teams', { type: 'Teams', id }],
    }),
  }),
});

// Export the hooks generated by RTK Query
export const {
  useGetTeamsQuery,
  useGetTeamByIdQuery,
  useCreateTeamMutation,
  useUpdateTeamMutation,
  useDeleteTeamMutation,
} = teamsApi;
